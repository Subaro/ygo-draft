// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	pgx "github.com/jackc/pgx/v4"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// PostgresClient is an autogenerated mock type for the PostgresClient type
type PostgresClient struct {
	mock.Mock
}

// Exec provides a mock function with given fields: query, args
func (_m *PostgresClient) Exec(query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryRow provides a mock function with given fields: query, args
func (_m *PostgresClient) QueryRow(query string, args ...interface{}) pgx.Row {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 pgx.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) pgx.Row); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}

	return r0
}

// NewPostgresClient creates a new instance of PostgresClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostgresClient(t testing.TB) *PostgresClient {
	mock := &PostgresClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
